// Zalo User Management Service
// X·ª≠ l√Ω User ID mapping gi·ªØa Mini App v√† OA theo t√†i li·ªáu Zalo
import { getUserInfo } from 'zmp-sdk/apis';

export interface ZaloUserInfo {
  id: string;
  name: string;
  avatar: string;
}

export class ZaloUserService {
  private static userCache: Map<string, ZaloUserInfo> = new Map();

  /**
   * L·∫•y User ID t·ª´ Zalo Mini App ƒë·ªÉ g·ª≠i OA message
   * Theo doc: getUserInfo API ƒë·ªÉ l·∫•y User ID c·ªßa ng∆∞·ªùi d√πng
   */
  static async getCurrentUserId(): Promise<string | null> {
    try {
      console.log('üì± Getting current user ID from Zalo Mini App...');
      
      const userInfo = await getUserInfo({
        avatarType: 'normal'
      });

      if (userInfo.userInfo && userInfo.userInfo.id) {
        const userId = userInfo.userInfo.id;
        
        // Cache user info for future use
        this.userCache.set(userId, {
          id: userId,
          name: userInfo.userInfo.name || '',
          avatar: userInfo.userInfo.avatar || ''
        });

        console.log('‚úÖ User ID retrieved:', userId);
        return userId;
      }

      console.error('‚ùå No user ID found in response');
      return null;
      
    } catch (error) {
      console.error('‚ùå Failed to get user ID:', error);
      return null;
    }
  }

  /**
   * L·∫•y th√¥ng tin user ƒë·∫ßy ƒë·ªß
   */
  static async getCurrentUserInfo(): Promise<ZaloUserInfo | null> {
    try {
      const userInfo = await getUserInfo({
        avatarType: 'normal'
      });

      if (userInfo.userInfo) {
        const user: ZaloUserInfo = {
          id: userInfo.userInfo.id,
          name: userInfo.userInfo.name || '',
          avatar: userInfo.userInfo.avatar || ''
        };

        this.userCache.set(user.id, user);
        return user;
      }

      return null;
      
    } catch (error) {
      console.error('‚ùå Failed to get user info:', error);
      return null;
    }
  }

  /**
   * L·∫•y user info t·ª´ cache
   */
  static getCachedUserInfo(userId: string): ZaloUserInfo | null {
    return this.userCache.get(userId) || null;
  }

  /**
   * Ki·ªÉm tra user c√≥ follow OA ch∆∞a
   * Note: C·∫ßn implement qua backend API check
   */
  static async checkUserFollowOA(userId: string): Promise<boolean> {
    try {
      // G·ªçi backend API ƒë·ªÉ check follow status
      const response = await fetch('/api/check-follow-status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: userId })
      });

      const result = await response.json();
      return result.is_following || false;
      
    } catch (error) {
      console.error('‚ùå Failed to check follow status:', error);
      return false;
    }
  }

  /**
   * L∆∞u User ID v√†o database khi booking
   * Theo doc: "L∆∞u tr·ªØ User ID v√†o h·ªá th·ªëng backend"
   */
  static async saveUserIdToBooking(bookingId: string, userId: string): Promise<boolean> {
    try {
      console.log(`üíæ Saving User ID ${userId} to booking ${bookingId}`);
      
      // Import dynamic ƒë·ªÉ tr√°nh circular dependency
      const { createClient } = await import('@supabase/supabase-js');
      
      const supabase = createClient(
        import.meta.env.VITE_SUPABASE_URL,
        import.meta.env.VITE_SUPABASE_ANON_KEY
      );

      const { error } = await supabase
        .from('bookings')
        .update({ user_id: userId })
        .eq('id', bookingId);

      if (error) {
        console.error('‚ùå Failed to save user ID:', error);
        return false;
      }

      console.log('‚úÖ User ID saved to booking');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error saving user ID:', error);
      return false;
    }
  }

  /**
   * Clear cache khi logout
   */
  static clearCache(): void {
    this.userCache.clear();
    console.log('üßπ User cache cleared');
  }
}

export default ZaloUserService;
